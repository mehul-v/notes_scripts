#######################################################################################
Enable SPDK debugging logging

0.  Clean spdk/build directory
root@tb74-host2:~/spdk# rm -rf build/

 1. Edit file : spdk/CONFIG and set below flag

# Build with debug logging. Turn off for performance testing and normal usage
CONFIG_DEBUG=y

 2.  Inside spdk directory, run below command

root@tb74-host2:~/spdk# ./configure  --enable-debug

3.   Run make inside spdk directory

root@tb74-host2:~/spdk# make

4.   Perform below steps before starting traffic.

/root/spdk/scripts/rpc.py log_set_level DEBUG
/root/spdk/scripts/rpc.py log_set_print_level DEBUG
/root/spdk/scripts/rpc.py log_set_flag nvmf_tcp
/root/spdk/scripts/rpc.py log_set_flag nvmf
/root/spdk/scripts/rpc.py log_set_flag nvme
/root/spdk/scripts/rpc.py log_set_flag aio

We should see the below output once we run the get commands

root@tb74-host2:~# /root/spdk/scripts/rpc.py log_get_print_level
"DEBUG"

root@tb74-host2:~# /root/spdk/scripts/rpc.py log_get_flags | grep true
  "aio": true,
  "nvme": true,
  "nvmf": true,
  "nvmf_tcp": true,


#######################################################################################
Setup SPDK with nvme bdev with backing SSD

1. Find SSD's pci address
   # modprobe nvme
   # readlink -f  /sys/class/nvme/nvme0
      /sys/devices/pci0000:d7/0000:d7:00.0/0000:d8:00.0/0000:d9:00.0/0000:da:00.0/nvme/nvme0
   # lspci -nn -s :da:00.0
      da:00.0 Non-Volatile memory controller [0108]: Kingston Technology Company, Inc. Device [2646:5013] (rev 01)
   # lspci -nn -d :5013
      da:00.0 Non-Volatile memory controller [0108]: Kingston Technology Company, Inc. Device [2646:5013] (rev 01)
      dc:00.0 Non-Volatile memory controller [0108]: Kingston Technology Company, Inc. Device [2646:5013] (rev 01)
   # nvme id-ctrl -H /dev/nvme0
   # nvme id-ns -H /dev/nvme0n1
  
2. Add rpc command in target script to attach nvme bdev
   /root/spdk/scripts/rpc.py bdev_nvme_attach_controller -b nvme0 -t PCIe -a 0000:da:00.0
   /root/spdk/scripts/rpc.py bdev_nvme_attach_controller -b nvme1 -t PCIe -a 0000:dc:00.0

   for ((CTL_i=1; CTL_i<=NUM_CTL; CTL_i++))
   do
        BD="nvme$((CTL_i-1))n1"
        NQN="nqn.2016-06.io.spdk:cnode${CTL_i}"
        SN="$(printf 'SPDK%014u' "${CTL_i}")"

        cmd "$SPDK_RPC" nvmf_create_subsystem "$NQN" -a -s "$SN" -d "SPDK_Controller$CTL_i" -m "$NUM_CTL_NS"
        cmd "$SPDK_RPC" nvmf_subsystem_add_listener -t tcp -a "$ADDR" -s 4420 -f ipv4 "$NQN"

        cmd "$SPDK_RPC" nvmf_subsystem_add_ns "$NQN" "$BD"
   done

3. Kill nvmf_tgt and restart it, getting LBA size from spdk bdev output
   1. # /root/spdk/build/bin/spdk_lspci 
   2. # /root/spdk/scripts/rpc.py bdev_get_bdevs

#######################################################################################
Update SPDK asset in git repo

1. Clone spdk 22.09 from GitHub , apply your  changes.
2. Do the spdk build and create tar ball of entire spdk directory
   cd spdk
   git submodule update --init
   ./scripts/pkgdep.sh
   ./configure
   make
3. Upload spdk new tar ball via upload asest jobc command
   tar cvz $(cat minio/spdk_nvme.txt) | /vol/tool/cicd/asset-upload  spdk_nvme <version>  /dev/stdin
   pick a descriptive version name
4. Update minio/VERSION file with the new version name for spdk
5. When you do make pull-assets in a docker container, you will see new tar ball in nic/sdk/spdk

#######################################################################################
